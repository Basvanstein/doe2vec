{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"DoE2Vec DoE2Vec is a self-supervised approach to learn exploratory landscape analysis features from design of experiments. The model can be used for downstream meta-learning tasks such as learninig which optimizer works best on a given optimization landscape. Or to classify optimization landscapes in function groups. The approach uses randomly generated functions and can also be used to find a \"cheap\" reference function given a DOE. The model uses Sobol sequences as the default sampling method. A custom sampling method can also be used. Both the samples and the landscape should be scaled between 0 and 1. Install package via pip ` pip install doe2vec ` Afterwards you can use the package via: from doe2vec import doe_model Load a model from the HuggingFace Hub Available models can be viewed here: https://huggingface.co/BasStein A model name is build up like BasStein/doe2vec-d2-m8-ls16-VAE-kl0.001 Where d is the number of dimensions, 8 the number (2^8) of samples, 16 the latent size, VAE the model type (variational autoencoder) and 0.001 the KL loss weight. Example code of loading a huggingface model obj = doe_model ( 2 , 8 , n = 50000 , latent_dim = 16 , kl_weight = 0.001 , use_mlflow = False , model_type = \"VAE\" ) obj . load_from_huggingface () #test the model obj . plot_label_clusters_bbob () How to Setup your Environment for Development python3.8 -m venv env source ./env/bin/activate pip install -r requirements.txt Generate the Data Set To generate the artificial function dataset for a given dimensionality and sample size run the following code from doe2vec inport doe_model obj = doe_model ( d , m , n = 50000 , latent_dim = latent_dim ) if not obj . load (): obj . generateData () obj . compile () obj . fit ( 100 ) obj . save () Where d is the number of dimensions, m the number of samples (2^ m ) per DOE, n the number of functions generated and latent_dim the size of the output encoding vector. Once a data set and encoder has been trained it can be loaded with the load() function.","title":"DoE2Vec"},{"location":"#install-package-via-pip","text":"` pip install doe2vec ` Afterwards you can use the package via: from doe2vec import doe_model","title":"Install package via pip"},{"location":"#load-a-model-from-the-huggingface-hub","text":"Available models can be viewed here: https://huggingface.co/BasStein A model name is build up like BasStein/doe2vec-d2-m8-ls16-VAE-kl0.001 Where d is the number of dimensions, 8 the number (2^8) of samples, 16 the latent size, VAE the model type (variational autoencoder) and 0.001 the KL loss weight. Example code of loading a huggingface model obj = doe_model ( 2 , 8 , n = 50000 , latent_dim = 16 , kl_weight = 0.001 , use_mlflow = False , model_type = \"VAE\" ) obj . load_from_huggingface () #test the model obj . plot_label_clusters_bbob ()","title":"Load a model from the HuggingFace Hub"},{"location":"#how-to-setup-your-environment-for-development","text":"python3.8 -m venv env source ./env/bin/activate pip install -r requirements.txt","title":"How to Setup your Environment for Development"},{"location":"#generate-the-data-set","text":"To generate the artificial function dataset for a given dimensionality and sample size run the following code from doe2vec inport doe_model obj = doe_model ( d , m , n = 50000 , latent_dim = latent_dim ) if not obj . load (): obj . generateData () obj . compile () obj . fit ( 100 ) obj . save () Where d is the number of dimensions, m the number of samples (2^ m ) per DOE, n the number of functions generated and latent_dim the size of the output encoding vector. Once a data set and encoder has been trained it can be loaded with the load() function.","title":"Generate the Data Set"},{"location":"doe2vec/doe_model/","text":"doe_model source doe_model ( dim , m , n = 250000 , latent_dim = 32 , seed_nr = 0 , kl_weight = 0.001 , custom_sample = None , use_mlflow = False , mlflow_name = 'Doc2Vec' , model_type = 'VAE' ) Methods: .load_from_huggingface source . load_from_huggingface ( repo = 'BasStein' ) Load a pre-trained model from a HuggingFace repository. Args repo (str, optional) : the huggingface repo to load from. .loadModel source . loadModel ( dir = 'models' ) Load a pre-trained Doe2vec model. Args dir (str, optional) : The directory where the model is stored. Defaults to \"models\". Returns bool : True if loaded, else False. .loadData source . loadData ( dir = 'data' ) Load a stored functions file and retrieve all the landscapes. Args dir (str, optional) : The directory where the data are stored. Defaults to \"data\". Returns bool : True if loaded, else False. .getSample source . getSample () Get the sample DOE used. Returns array : Sample .generateData source . generateData () Generate the random functions for training the autoencoder. Returns array : array with evaluated random functions on sample. .setData source . setData ( Y ) Helper function to load the data and split in train validation sets. Args Y (nd array) : the data set to use. .compile source . compile () Compile the autoencoder architecture. .fit source . fit ( epochs = 100 , ** kwargs ) Fit the autoencoder model. Args epochs (int, optional) : Number of epochs to train. Defaults to 100. kwargs (dict, optional) : optional arguments for the fit procedure. .fitNN source . fitNN () Fit the neirest neighbour tree to find similar functions. .getNeighbourFunction source . getNeighbourFunction ( features ) Get the closest random generated function depending on a set of features (from another function). Args features (array) : Feature vector (given by the encode() function) Returns tuple : random function string, distance .save source . save ( model_dir = 'model' , data_dir = 'data' ) Save the model and random functions used for training Args model_dir (str, optional) : Directory to store the model. Defaults to \"model\". data_dir (str, optional) : Directory to store the random functions. Defaults to \"data\". .saveModel source . saveModel ( model_dir ) Save the model Args model_dir (str, optional) : Directory to store the model. Defaults to \"model\". .saveData source . saveData ( data_dir = 'data' ) Save the random functions used for training Args data_dir (str, optional) : Directory to store the random functions. Defaults to \"data\". .encode source . encode ( X ) Encode a Design of Experiments. Args X (array) : The DOE to encode. Returns array : encoded feature vector. .summary source . summary () Get a summary of the autoencoder model .plot_label_clusters_bbob source . plot_label_clusters_bbob () .visualizeTestData source . visualizeTestData ( n = 5 ) Get a visualisation of the validation data. Args n (int, optional) : The number of validation DOEs to show. Defaults to 5.","title":"Class reference"},{"location":"doe2vec/doe_model/#_1","text":"","title":""},{"location":"doe2vec/doe_model/#doe_model","text":"source doe_model ( dim , m , n = 250000 , latent_dim = 32 , seed_nr = 0 , kl_weight = 0.001 , custom_sample = None , use_mlflow = False , mlflow_name = 'Doc2Vec' , model_type = 'VAE' ) Methods:","title":"doe_model"},{"location":"doe2vec/doe_model/#load_from_huggingface","text":"source . load_from_huggingface ( repo = 'BasStein' ) Load a pre-trained model from a HuggingFace repository. Args repo (str, optional) : the huggingface repo to load from.","title":".load_from_huggingface"},{"location":"doe2vec/doe_model/#loadmodel","text":"source . loadModel ( dir = 'models' ) Load a pre-trained Doe2vec model. Args dir (str, optional) : The directory where the model is stored. Defaults to \"models\". Returns bool : True if loaded, else False.","title":".loadModel"},{"location":"doe2vec/doe_model/#loaddata","text":"source . loadData ( dir = 'data' ) Load a stored functions file and retrieve all the landscapes. Args dir (str, optional) : The directory where the data are stored. Defaults to \"data\". Returns bool : True if loaded, else False.","title":".loadData"},{"location":"doe2vec/doe_model/#getsample","text":"source . getSample () Get the sample DOE used. Returns array : Sample","title":".getSample"},{"location":"doe2vec/doe_model/#generatedata","text":"source . generateData () Generate the random functions for training the autoencoder. Returns array : array with evaluated random functions on sample.","title":".generateData"},{"location":"doe2vec/doe_model/#setdata","text":"source . setData ( Y ) Helper function to load the data and split in train validation sets. Args Y (nd array) : the data set to use.","title":".setData"},{"location":"doe2vec/doe_model/#compile","text":"source . compile () Compile the autoencoder architecture.","title":".compile"},{"location":"doe2vec/doe_model/#fit","text":"source . fit ( epochs = 100 , ** kwargs ) Fit the autoencoder model. Args epochs (int, optional) : Number of epochs to train. Defaults to 100. kwargs (dict, optional) : optional arguments for the fit procedure.","title":".fit"},{"location":"doe2vec/doe_model/#fitnn","text":"source . fitNN () Fit the neirest neighbour tree to find similar functions.","title":".fitNN"},{"location":"doe2vec/doe_model/#getneighbourfunction","text":"source . getNeighbourFunction ( features ) Get the closest random generated function depending on a set of features (from another function). Args features (array) : Feature vector (given by the encode() function) Returns tuple : random function string, distance","title":".getNeighbourFunction"},{"location":"doe2vec/doe_model/#save","text":"source . save ( model_dir = 'model' , data_dir = 'data' ) Save the model and random functions used for training Args model_dir (str, optional) : Directory to store the model. Defaults to \"model\". data_dir (str, optional) : Directory to store the random functions. Defaults to \"data\".","title":".save"},{"location":"doe2vec/doe_model/#savemodel","text":"source . saveModel ( model_dir ) Save the model Args model_dir (str, optional) : Directory to store the model. Defaults to \"model\".","title":".saveModel"},{"location":"doe2vec/doe_model/#savedata","text":"source . saveData ( data_dir = 'data' ) Save the random functions used for training Args data_dir (str, optional) : Directory to store the random functions. Defaults to \"data\".","title":".saveData"},{"location":"doe2vec/doe_model/#encode","text":"source . encode ( X ) Encode a Design of Experiments. Args X (array) : The DOE to encode. Returns array : encoded feature vector.","title":".encode"},{"location":"doe2vec/doe_model/#summary","text":"source . summary () Get a summary of the autoencoder model","title":".summary"},{"location":"doe2vec/doe_model/#plot_label_clusters_bbob","text":"source . plot_label_clusters_bbob ()","title":".plot_label_clusters_bbob"},{"location":"doe2vec/doe_model/#visualizetestdata","text":"source . visualizeTestData ( n = 5 ) Get a visualisation of the validation data. Args n (int, optional) : The number of validation DOEs to show. Defaults to 5.","title":".visualizeTestData"}]}